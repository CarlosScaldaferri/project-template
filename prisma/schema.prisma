generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  id         Int     @id @default(autoincrement())
  user_id    Int
  zip_code   Int
  street     String
  number     Int
  complement String?
  city       String
  state      String
  is_main    Boolean
  country    String
  district   String
  user       user    @relation(fields: [user_id], references: [id])
}

model email {
  id             Int       @id @default(autoincrement())
  user_id        Int
  email          String    @unique
  is_main        Boolean
  email_verified DateTime?
  user           user      @relation(fields: [user_id], references: [id])
}

model telephone {
  id           Int     @id @default(autoincrement())
  user_id      Int
  country_code Int
  state_code   Int
  number       Int
  type         String
  is_main      Boolean
  full_number  String
  user         user    @relation(fields: [user_id], references: [id])
}

model user {
  id         Int         @id @default(autoincrement())
  name       String?
  nickname   String?
  birth_date DateTime?
  picture    String?
  password   String
  updated_at DateTime?
  cpf        String?     @unique
  accounts   account[]
  address    address[]
  email      email[]
  sessions   session[]
  telephone  telephone[]
  user_roles user_role[]
  rules      rule[]      @relation("user_rules")  // Relação nomeada
}

model path {
  id    Int    @id @default(autoincrement())
  route String 
  field String?
  rules rule[] @relation("path_rules")  // Relação nomeada
}

model user_role {
  id      Int  @id @default(autoincrement())
  user    user @relation(fields: [user_id], references: [id])
  user_id Int
  role    role @relation(fields: [role_id], references: [id])
  role_id Int

  @@unique([user_id, role_id])
}

model role {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  is_admin  Boolean     @default(false)
  rules     rule[]      @relation("role_rules")  // Relação nomeada
  user_roles user_role[]
}

model rule {
  id      Int     @id @default(autoincrement())
  path    path    @relation("path_rules", fields: [path_id], references: [id])
  path_id Int
  create  Boolean @default(false)
  read    Boolean @default(false)
  update  Boolean @default(false)
  delete  Boolean @default(false)
  role    role?   @relation("role_rules", fields: [role_id], references: [id])
  role_id Int?
  user    user?   @relation("user_rules", fields: [user_id], references: [id])
  user_id Int?
}

model account {
  id                  String  @id @default(cuid())
  user_id             Int
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                user    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user_id      Int
  expires      DateTime
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
